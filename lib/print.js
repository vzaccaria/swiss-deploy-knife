// Generated by LiveScript 1.2.0
(function(){
  var _, moment, fs, color, ref$, spawn, kill, __q, sh, os, shelljs, cl, ut, winston, et, dispOk, dispKo, disp, pdisp, pdeb, ticks, circ, circles, level, _module;
  _ = require('underscore');
  _.str = require('underscore.string');
  moment = require('moment');
  fs = require('fs');
  color = require('ansi-color').set;
  ref$ = require('child_process'), spawn = ref$.spawn, kill = ref$.kill;
  __q = require('q');
  sh = require('shelljs');
  os = require('os');
  shelljs = sh;
  cl = require('clark');
  ut = require('utf-8');
  winston = require('winston');
  et = require('easy-table');
  dispOk = function(){
    return winston.info("Ok");
  };
  dispKo = winston.error;
  disp = winston.info;
  pdisp = console.log;
  pdeb = winston.warn;
  _.mixin(_.str.exports());
  _.str.include('Underscore.string', 'string');
  ticks = ['▁', '▂', '▃', '▄', '▅', '▆', '▇'];
  circ = ['◯ ', '⚪ ', '⚬ ', '● '];
  circles = function(l){
    var oneGb, hundredGb, tensGb, unitGb, a, k, b;
    oneGb = Math.pow(2, 30);
    hundredGb = Math.floor(l / (100 * oneGb));
    l = l - hundredGb * 100 * oneGb;
    tensGb = Math.floor(l / (10 * oneGb));
    l = l - tensGb * 10 * oneGb;
    unitGb = Math.floor(l / oneGb);
    a = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
        k = ref$[i$];
        results$.push(circ[0]);
      }
      return results$;
      function fn$(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = hundredGb; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
    }()).join('');
    b = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
        k = ref$[i$];
        results$.push(circ[1]);
      }
      return results$;
      function fn$(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = tensGb; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
    }()).join('');
    return a + b;
  };
  level = function(l){
    var k;
    return (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
        k = ref$[i$];
        results$.push(ticks[k]);
      }
      return results$;
      function fn$(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = l; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
    }()).join('');
  };
  _module = function(){
    var scope, init, tab, formatTaskNamespace, formatTaskName, printEnv, printAsTable, iface;
    init = function(data){
      return scope = data;
    };
    tab = 40;
    formatTaskNamespace = function(s){
      return _.pad('', 2) + _.rpad(color(s, 'bold'), tab - 2);
    };
    formatTaskName = function(ns, s){
      return _.pad(ns + ":", 10) + _.rpad(s, tab - 20 + 2);
    };
    printEnv = function(nodes, namespace, argv){
      var nns, vns, k, ref$, v, name, data;
      pdisp("Namespace and tasklist:");
      pdisp("");
      for (nns in namespace) {
        vns = namespace[nns];
        pdisp(formatTaskNamespace(nns), " — " + vns.description);
        for (k in ref$ = vns.tasks) {
          v = ref$[k];
          if ((argv.all != null && argv.all) || v.show) {
            pdisp(formatTaskName(nns, k), " — " + v.description);
          }
        }
        pdisp("");
      }
      pdisp("Nodes:");
      pdisp("");
      for (name in nodes) {
        data = nodes[name];
        if (name !== 'default') {
          pdisp(formatTaskNamespace(name), " — ", data.description, "[", color(data.path.access, 'green'), "]");
        }
      }
      return 0;
    };
    printAsTable = function(local, data, options){
      var i$, ref$, len$, f, j$, len1$, d, m, bytes, r;
      if ((options != null ? options.sparkly : void 8) != null && _.isArray(options.sparkly)) {
        for (i$ = 0, len$ = (ref$ = options.sparkly).length; i$ < len$; ++i$) {
          f = ref$[i$];
          if (f === 'percent') {
            for (j$ = 0, len1$ = data.length; j$ < len1$; ++j$) {
              d = data[j$];
              m = d['percent'] / 20;
              d['percent'] = _.rpad(level(m), 7) + "|" + _.pad(d['percent'], 3) + "%";
            }
          }
          if (f === 'blocks') {
            for (j$ = 0, len1$ = data.length; j$ < len1$; ++j$) {
              d = data[j$];
              if (local.hosttype === 'linux') {
                f = 1;
              } else {
                f = 2;
              }
              bytes = d['blocks'] * 1000 / f;
              d['blocks'] = _.rpad(circles(bytes), 24) + "|";
            }
          }
        }
      }
      if ((options != null ? options.remove : void 8) != null && _.isArray(options.remove)) {
        for (i$ = 0, len$ = (ref$ = options.remove).length; i$ < len$; ++i$) {
          r = ref$[i$];
          for (j$ = 0, len1$ = data.length; j$ < len1$; ++j$) {
            d = data[j$];
            delete d[r];
          }
        }
      }
      return pdisp(et.printArray(data));
    };
    iface = {
      printAsTable: printAsTable,
      printEnv: printEnv
    };
    return iface;
  };
  module.exports = _module();
}).call(this);
