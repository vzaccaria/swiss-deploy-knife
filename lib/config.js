// Generated by LiveScript 1.2.0
(function(){
  var ref$, namespace, task, buildTasks, run, runLocal, runLocalSafe, createLocal, removeLocal, zsh, bsh, sequence, printAsTable, get, put, openTerminal, save, mirror, append, createLezione, createEsercitazione, createComunicazione, fail, shelljs, saveRemotely, copy, mzsh, home, sshCred, setupUbuntuDocker, nodes, localBinDir, ns;
  ref$ = require('swiss-deploy-knife/lib/task'), namespace = ref$.namespace, task = ref$.task, buildTasks = ref$.buildTasks, run = ref$.run, runLocal = ref$.runLocal, runLocalSafe = ref$.runLocalSafe, createLocal = ref$.createLocal, removeLocal = ref$.removeLocal, zsh = ref$.zsh, bsh = ref$.bsh, sequence = ref$.sequence;
  printAsTable = require('swiss-deploy-knife/lib/print').printAsTable;
  ref$ = require('swiss-deploy-knife/lib/ssh'), get = ref$.get, put = ref$.put, openTerminal = ref$.openTerminal, save = ref$.save, mirror = ref$.mirror, append = ref$.append;
  ref$ = require('swiss-deploy-knife/lib/jekyll'), createLezione = ref$.createLezione, createEsercitazione = ref$.createEsercitazione, createComunicazione = ref$.createComunicazione;
  fail = require('swiss-deploy-knife/lib/actions').fail;
  shelljs = require('shelljs');
  saveRemotely = save;
  copy = function(x){
    var cmm;
    cmm = "echo '" + x + "' | pbcopy";
    console.log("Copying '" + x + "' to the clipboard");
    return shelljs.exec(cmm);
  };
  mzsh = function(c){
    return "zsh -l -c 'source .zshrc && " + c + "'";
  };
  home = process.env.HOME;
  sshCred = home + "/.ssh/id_rsa";
  setupUbuntuDocker = '# DOCKER-VERSION 0.8.0\n#\n# Dockerfile created for staging and deploy infoweb-app\n\n\nFROM cmfatih/nodejs\n\nEXPOSE 80\nEXPOSE 22\n\nRUN npm install -g n\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install wget curl';
  nodes = {
    w1: {
      description: "Website at www.vittoriozaccaria.net",
      path: {
        username: "vittoriozaccaria.net",
        hostname: "217.64.195.216",
        credentials: home + "/.ssh/sftp_credentials.js",
        access: 'ftp'
      },
      saveTo: "data"
    },
    s1: {
      description: "Hbomb",
      path: {
        username: "zaccaria",
        hostname: "hbomb.elet.polimi.it",
        port: 22,
        credentials: sshCred,
        hosttype: 'linux',
        access: 'ssh',
        shell: mzsh,
        login: {
          directory: '~/test'
        }
      }
    },
    s2: {
      description: "Boot2docker box",
      path: {
        from: 's1',
        use: 4444,
        username: "docker",
        hostname: "localhost",
        port: 2022,
        credentials: sshCred,
        hosttype: 'linux',
        access: 'ssh',
        login: {
          shell: bsh,
          runAsSudo: true,
          directory: '~/test/infoweb'
        }
      }
    },
    s3: {
      description: "Macbook",
      path: {
        username: "zaccaria",
        hostname: "localhost",
        port: "22",
        credentials: sshCred,
        hosttype: 'mac',
        access: 'ssh',
        login: {
          shell: mzsh,
          runAsSudo: false,
          directory: '~/test/infoweb'
        }
      }
    },
    s3root: {
      description: "Macbook",
      path: {
        username: "zaccaria",
        hostname: "localhost",
        port: "22",
        credentials: sshCred,
        hosttype: 'mac',
        access: 'ssh',
        login: {
          shell: mzsh,
          runAsSudo: false,
          directory: '~'
        }
      }
    },
    bonzo: {
      description: "Mini farm",
      path: {
        username: "zaccaria",
        hostname: "192.168.0.103",
        port: "22",
        credentials: sshCred,
        hosttype: 'linux',
        access: 'ssh',
        login: {
          shell: mzsh,
          runAsSudo: false,
          directory: '~'
        }
      }
    },
    'default': 's3'
  };
  localBinDir = 'bin';
  if (require('os').hostname() === 'hbomb') {
    delete nodes['s2'].path.from;
    delete nodes['s2'].path.use;
  }
  ns = buildTasks([
    namespace('general', 'general commands applicable to almost all access modes', task('cmd', "Executes a command specified with -c `command`", function(){
      return run(this.remote, this.args.command);
    }), task('dfj', 'inspects disk quotas', function(){
      var this$ = this;
      return runLocal(this.remote, 'df-json', {
        silent: true
      }).then(function(it){
        return JSON.parse(it);
      }).then(function(it){
        var opts;
        opts = {
          sparkly: ['percent', 'blocks'],
          remove: ['filesystem', 'used', 'available']
        };
        return printAsTable(this$.remote, it, opts);
      });
    }), task('ssh', 'launches an ssh term on the remote node', function(){
      return openTerminal(this.remote);
    }), task('env', 'prints current env, as seen by sk', function(){
      return console.log(process.env);
    })), namespace('mac', 'applicable to this mac', {
      defaultNode: 's3'
    }, task('vagrant-check', {
      show: true
    }, 'inspects a running instance of vagrant (local)', function(){
      return run(this.remote, ["bash -l -c 'cd ~/docker/docker && vagrant status | grep default'"]);
    })), namespace('local', 'these commands run only on local machine', {
      defaultNode: 's3root'
    }, task('install-semantic-angle', 'downloads SA from github and installs it in the local directory', function(){
      shelljs.exec('wget https://github.com/vzaccaria/semantic-angle/archive/master.zip');
      shelljs.exec('mv master master.zip');
      return shelljs.exec('unzip *.zip');
    })), namespace('hbomb', 'applicable to hbomb', {
      defaultNode: 's1'
    }, task('vagrant-check', 'inspects a running instance of vagrant', function(){
      return run(this.remote, ["bash -l -c 'cd /data2/zaccaria && vagrant status | grep default'"]);
    })), namespace('linux', 'general commands applicable to x86 hosts', {
      defaultNode: 's2'
    }, task('prepare-ngrok', 'Installs ngrok into target machine', function(){
      return runLocal(this.remote, ["mkdir -p " + localBinDir, "rm -f ngrok.zip", "rm -f ngrok", "wget https://dl.ngrok.com/linux_386/ngrok.zip", "wget http://www.vittoriozaccaria.net/deposit/ngrok.sh", "unzip ngrok.zip", "rm -f ngrok.zip", "mv ngrok " + localBinDir, "mv ngrok.sh " + localBinDir]);
    }), task('prepare-forever', 'Installs forever on target machine', function(){
      return runLocal(this.remote, "npm install -g n forever");
    })), namespace('jekyll', 'jekyll website tasks', {
      defaultNode: 's3'
    }, task('lezione', "Creates a post for a lezione, use -c 'tag1,tag2,...' for tags", function(){
      var post;
      post = createLezione(this.args.tags);
      save(post, {
        to: "local:/Users/zaccaria/short/website/_posts/",
        'in': this.nodes
      });
      return copy("vi /Users/zaccaria/short/website/_posts/" + post.filename);
    }), task('esercitazione', "Creates a post for an esercitazione, use -c 'tag1,tag2,...' for tags", function(){
      var post;
      post = createEsercitazione(this.args.tags);
      save(post, {
        to: "local:/Users/zaccaria/short/website/_posts/",
        'in': this.nodes
      });
      return copy("vi /Users/zaccaria/short/website/_posts/" + post.filename);
    }), task('comunicazione', "Creates a post for a comunicazione, use -c 'tag1,tag2,...' for tags", function(){
      var post;
      post = createComunicazione(this.args.tags);
      save(post, {
        to: "local:/Users/zaccaria/short/website/_posts/",
        'in': this.nodes
      });
      return copy("vi /Users/zaccaria/short/website/_posts/" + post.filename);
    }), task('deploy', "Deploy the website", function(){
      var this$ = this;
      return runLocal(this.remote, "cd /Users/zaccaria/short/website && make", {
        silent: true
      }).then(function(){
        return mirror({
          from: "local:/Users/zaccaria/short/website/_site",
          to: "w1:.",
          'in': this$.nodes
        });
      });
    })), namespace('infoweb', 'tasks associated with testing the infoweb project', {
      defaultNode: 's1'
    }, task('buildenv-manual', {
      show: true
    }, "Shows manual steps to define a build environment", function(){
      var s;
      s = "sudo DEBIAN_FRONTEND=noninteractive apt-get -y install curl\nsudo npm install -g grunt-cli sails n mocha forever LiveScript";
      return console.log(s);
    }), task('buildenv-showprereq', {
      show: true
    }, "Installs curl and shows installation prerequisites after a clean vagrant installation", function(){
      var this$ = this;
      return runLocal(this.remote, "apt-get install curl", {
        runAsSudo: true
      }).then(function(){
        var s;
        s = "*** \nSetup svn: sudo vi ~/.subversion/servers -> store-passwords and store-plaintext-passwords = yes\nSetup grok with task linux:prepare-ngrok\n\nIf the target machine is a docker host, copy and paste this into a Dockerfile:\n\n# DOCKER-VERSION 0.8.0\n#\n# Dockerfile created for staging and deploy infoweb-app\n\n\nFROM cmfatih/nodejs\n\nEXPOSE 80\nEXPOSE 22\n\nRUN npm install -g n\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install wget";
        return console.log(s);
      });
    }), task('buildenv-create', "Creates the environment for infoweb, using default-node data", function(){
      return createLocal(this.remote);
    }), task('buildenv-remove', "Removes the environment for infoweb, using default node data", function(){
      return removeLocal(this.remote);
    }), task('buildenv-prepare', "Installs globally grunt, sails, n and node 0.10.13", function(){
      var this$ = this;
      return runLocal(this.remote, "npm install -g grunt-cli sails n mocha forever LiveScript", {
        runAsSudo: true
      }).then(function(){
        return runLocal(this$.remote, "n 0.10.13");
      });
    }), task('buildenv-default', {
      show: true
    }, "Cleans up everything and prepares for a new installation. Launch after buildenv-showprereq ", function(){
      return sequence(this, ['buildenv-remove', 'buildenv-create']);
    }), task('src-checkout', "Checks out repository in ~/test/infoweb", function(){
      return runLocal(this.remote, 'svn co -q https://zaccaria@svn.ws.dei.polimi.it/multicube/trunk/devel/zaccaria/infoweb');
    }), task('src-update', "Update repo in ~/test/infoweb", function(){
      return runLocal(this.remote, 'svn update infoweb');
    }), task('src-link-packages', "Executes `npm install` in ~/test/infoweb", function(){
      var this$ = this;
      return runLocal(this.remote, 'npm install', {
        subDir: 'infoweb'
      }).then(function(){
        return runLocal(this$.remote, 'npm install ansi-color optimist shelljs ansi-color-table express', {
          subDir: 'infoweb'
        });
      }).then(function(){
        return runLocal(this$.remote, 'npm install', {
          subDir: 'infoweb/node_modules/sails'
        });
      });
    }), task('src-compile', "Executes `grunt deploy` in ~/test/infoweb", function(){
      return runLocal(this.remote, 'grunt deploy', {
        subDir: 'infoweb'
      });
    }), task('src-default', {
      show: true
    }, "After buildenv-default, deploy from svn and finalize source code with this command", function(){
      return sequence(this, ['src-checkout', 'src-link-packages', 'src-compile']);
    }), task('src-default-fast', "When source is already deployed, same as above but use only update from svn", function(){
      return sequence(this, ['src-update', 'src-link-packages', 'src-compile']);
    }), task('test-be2', function(){
      var this$ = this;
      return runLocalSafe(this.remote, './scripts/be2-test', {
        subDir: 'infoweb',
        silent: true
      }).then(function(it){
        return append(it, {
          to: "w1:data/iwtest-be2.json",
          'in': this$.nodes,
          first: 5
        });
      });
    }), task('test-be', function(){
      var this$ = this;
      return runLocalSafe(this.remote, './scripts/be-test', {
        subDir: 'infoweb',
        silent: true
      }).then(function(it){
        return append(it, {
          to: "w1:data/iwtest-be.json",
          'in': this$.nodes,
          first: 5
        });
      });
    }), task('test-fe', function(){
      var this$ = this;
      return runLocalSafe(this.remote, './scripts/fe-test', {
        subDir: 'infoweb',
        silent: true
      }).then(function(it){
        return append(it, {
          to: "w1:data/iwtest-fe.json",
          'in': this$.nodes,
          first: 5
        });
      });
    }), task('test-default', {
      show: true
    }, "Executes tests on current environment", function(){
      return sequence(this, ['test-be', 'test-be2', 'test-fe', 'test-e2e-default']);
    }), task('stage-and-test-default', {
      show: true
    }, "(Nightly) Wipes everything, builds and tests (complete regression test)", function(){
      return sequence(this, ['buildenv-default', 'src-default', 'test-default']);
    }), task('test-e2e-start', "Starts app in test mode", function(){
      return runLocal(this.remote, 'NODE_TEST=true forever start app.js', {
        subDir: 'infoweb/infoweb'
      });
    }), task('test-e2e-stop', "Stops app in test mode", function(){
      return runLocal(this.remote, 'NODE_TEST=true forever stop app.js', {
        subDir: 'infoweb/infoweb'
      });
    }), task('test-e2e-engage', "End to end test", function(){
      var this$ = this;
      return runLocalSafe(this.remote, './scripts/e2e-test', {
        subDir: 'infoweb',
        silent: true
      }).then(function(it){
        return append(it, {
          to: "w1:data/iwtest-e2e.json",
          'in': this$.nodes,
          first: 5
        });
      }).then(function(){
        return runLocal(this$.remote, 'killall phantomjs');
      });
    }), task('test-e2e-human-engage', "End to end test", function(){
      var this$ = this;
      return runLocal(this.remote, './scripts/e2e-test-human', {
        subDir: 'infoweb',
        silent: true
      }).then(function(){
        return runLocal(this$.remote, 'killall phantomjs');
      });
    }), task('test-e2e-default', "Starts test server, tests e2e and shutsdown test server", function(){
      return sequence(this, ['test-e2e-start', 'test-e2e-engage', 'test-e2e-stop']);
    }), task('test-e2e-human-default', "Starts test server, tests e2e and shutsdown test server", function(){
      return sequence(this, ['test-e2e-start', 'test-e2e-human-engage', 'test-e2e-stop']);
    }), task('prod-start', "Starts app in production mode", function(){
      return runLocal(this.remote, 'NODE_ENV=production forever start app.js', {
        subDir: 'infoweb/infoweb'
      });
    }), task('prod-stop', "Stops app in production  mode", function(){
      return runLocal(this.remote, 'NODE_ENV=production forever stop app.js', {
        subDir: 'infoweb/infoweb'
      });
    }), task('prod-openport', "Opens 80 through ngrok", function(){
      var auth;
      auth = require('/Users/zaccaria/.ssh/ngrok_credentials.js').token;
      return runLocal(this.remote, ["forever start -c 'bash' " + localBinDir + "/ngrok.sh -authtoken " + auth + " -subdomain=vz-infoweb-prod  -proto=http -log='stdout' 80 "]);
    }), task('prod-lift', "Lift app and start ngrok", function(){
      return sequence(this, ['prod-start', 'prod-openport']);
    }), task('forever-stopall', "Close app", function(){
      return runLocal(this.remote, "forever stopall");
    }), task('forever-list', 'List forever processes', function(){
      return runLocal(this.remote, "forever list");
    }), task('ssh', 'Launches an ssh term on the remote node', function(){
      return openTerminal(this.remote);
    })), namespace('render', 'general commands to render to blender', {
      defaultNode: 's2'
    }, task('put', 'Copies files to hbomb', function(){
      var code;
      code = shelljs.exec("scp " + this.args.command + " zaccaria@hbomb.elet.polimi.it:/data2/zaccaria/vagrant/tmp.blend").code;
      if (code === 0) {
        return run(this.remote, "cp '/vagrant/vagrant/tmp.blend' ~/blender-test/blend");
      } else {
        console.log("Sorry, cannot find file.");
        return fail();
      }
    }), task('render', function(){
      return run(this.remote, "cd ~/blender-test && blender -noaudio -b ./blend/tmp.blend -o //file -F JPEG -x 1 -f 1");
    }), task('get', 'Gets files from hbomb', function(){
      return run(this.remote, "cp '/home/vagrant/blender-test/blend/file0001.jpg' /vagrant/vagrant/result.jpg").then(function(){
        return shelljs.exec("scp zaccaria@hbomb.elet.polimi.it:/data2/zaccaria/vagrant/result.jpg .");
      });
    }), task('complete', function(){
      return sequence(this, ['put', 'render', 'get']);
    })), namespace('bz-render', 'general commands to render to blender', {
      defaultNode: 'bonzo'
    }, task('put', 'Copies files to bonzo', function(){
      var code;
      code = shelljs.exec("scp " + this.args.command + " zaccaria@192.168.0.103:/home/zaccaria/blender-tests/blend/tmp.blend").code;
      if (code !== 0) {
        console.log("Sorry, cannot find file.");
        return fail();
      }
    }), task('render', function(){
      return run(this.remote, "cd ~/blender-tests && blender -noaudio -b ./blend/tmp.blend -o //file -F JPEG -x 1 -f 1");
    }), task('get', 'Gets files from bonzo', function(){
      return shelljs.exec("scp  zaccaria@192.168.0.103:/home/zaccaria/blender-tests/blend/file0001.jpg ./result.jpg");
    }), task('complete', function(){
      return sequence(this, ['put', 'render', 'get']);
    }))
  ]);
  module.exports.nodes = nodes;
  module.exports.namespace = ns;
}).call(this);
